/*
 * GhostBot, a Discord bot made for all your Danny Phantom needs
 *     Copyright (C) 2018  Duncan "duncte123" Sterken
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'groovy'
    id 'application'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '4.0.2'
}

group 'me.duncte123.ghostbot'
version "2.0.1_${getGitHash()}"
mainClassName = "${group}.GhostBot"

sourceCompatibility = JavaVersion.VERSION_11

repositories {
    jcenter()

    maven {
        name 'jitpack'
        url 'https://jitpack.io'
    }
}

dependencies {
//    implementation 'com.github.apache.groovy:groovy-all:d87966b'
    implementation group: 'org.codehaus.groovy', name: 'groovy', version: '2.5.4'
    
    //My little utils
    implementation group: 'com.github.duncte123', name: 'botCommons', version: '8c9ad29'
    //JDA
    implementation(group: 'net.dv8tion', name: 'JDA', version: '3.8.1_441') {
        exclude module: 'opus-java'
    }
    //LavaPlayer/Lavalink
    implementation group: 'com.github.FredBoat', name: 'Lavalink-Client', version: 'fbd2975'
    // Logback classic
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

task sourcesForRelease(type: Copy) {
    from('src/main/groovy') {
        include '**/Variables.groovy'
        filter(ReplaceTokens, tokens: [
                ghostBotVersion: project.version.toString()
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

task generateGroovySources(type: SourceTask) {
    def groovySources = sourceSets.main.allGroovy.filter {
        it.name != 'Variables.groovy'
    }
	
    source = groovySources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileGroovy {

    println groovyClasspath
    
    source = generateGroovySources.source

    options.encoding = 'UTF-8'

    dependsOn generateGroovySources
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

shadowJar {
    version = null
    classifier = null
}

build {
    dependsOn clean
    
    build.mustRunAfter clean
}